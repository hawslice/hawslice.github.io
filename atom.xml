<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Teow&#39;s blog</title>
  
  <subtitle>吾将上下而求索</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hawslice.com/"/>
  <updated>2020-04-22T05:42:20.629Z</updated>
  <id>http://hawslice.com/</id>
  
  <author>
    <name>Teow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言基本数据类型及长度</title>
    <link href="http://hawslice.com/2020/04/21/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://hawslice.com/2020/04/21/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-04-21T14:53:40.000Z</published>
    <updated>2020-04-22T05:42:20.629Z</updated>
    
    <content type="html"><![CDATA[<p>在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统，其中函数的类型指的是函数返回值的类型。对象的类型决定该对象可取值的集合以及可以对该对象执行的操作。</p><a id="more"></a><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a><font color="purple">基本数据类型</font></h2><p>C语言提供了下列几种基本数据类型</p><ul><li><strong>char</strong> 字符型，占用一个字节，可以存放本地字符集中的一个字符。</li><li><strong>int</strong> 整型，占用四个字节，通常反映了所用机器中整数的最自然长度。</li><li><strong>float</strong> 单精度浮点型，占用四个字节。</li><li><strong>double</strong> 双精度浮点型，占用八个字节。</li></ul><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a><font color="purple">字符型</font></h3><p>下表列出了关于字符类型的存储大小和值范围的细节：</p><table><thead><tr><th>类型</th><th>存储大小</th><th>取值范围</th></tr></thead><tbody><tr><td>char</td><td>1 字节</td><td>-128 到 127 或 0 到 255</td></tr><tr><td>unsigned char</td><td>1 字节</td><td>0 到 255</td></tr><tr><td>signed char</td><td>1 字节</td><td>-128 到 127</td></tr></tbody></table><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a><font color="purple">整型</font></h3><p>下表列出了关于整数类型的存储大小和值范围的细节：</p><table><thead><tr><th>类型</th><th>存储大小</th><th>取值范围</th></tr></thead><tbody><tr><td>int</td><td>2 或 4 字节</td><td>-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned int</td><td>2 或 4 字节</td><td>0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td>short</td><td>2 字节</td><td>-32,768 到 32,767</td></tr><tr><td>unsigned short</td><td>2 字节</td><td>0 到 65,535</td></tr><tr><td>long</td><td>4 字节</td><td>-2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned long</td><td>4 字节</td><td>0 到 4,294,967,295</td></tr></tbody></table><p>注：当用<code>long</code>或<code>short</code>限定符限定整型时，关键字<code>int</code>可以省路，通常很多人也习惯这样做。</p><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a><font color="purple">浮点型</font></h3><p>下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：</p><table><thead><tr><th>类型</th><th>存储大小</th><th>取值范围</th><th>精度</th></tr></thead><tbody><tr><td>float</td><td>4 字节</td><td>1.2E-38 到 3.4E+38</td><td>6 位小数</td></tr><tr><td>double</td><td>8 字节</td><td>2.3E-308 到 1.7E+308</td><td>15 位小数</td></tr><tr><td>long double</td><td>16 字节</td><td>3.4E-4932 到 1.1E+4932</td><td>19 位小数</td></tr></tbody></table><p>注：上述内容皆适用于常见的64位系统，对于其他具体机器，可能会出现不同存储大小。</p><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a><font color="purple">补充说明</font></h3><p><code>short</code>与<code>long</code>两个限定符的引入可以为我们提供满足实际需要的不同长度的整型数。<code>int</code>通常代表特定机器中整数的自然长度。编译器可以根据硬件性能特性自主选择合适的类型长度，但要遵循下列限制：<code>short</code>与<code>int</code>类型至少为16位，二<code>long</code>类型至少位32位，并且<code>short</code>类型不得长于<code>int</code>类型，而<code>int</code>类型不得长于<code>long</code>类型。</p><p>类型限定符<code>signed</code>与<code>unsigned</code>可用于限定<code>char</code>类型或任何整型。<code>unsigned</code>类型得数总是正值或0，并遵守算数模2^n，其中n是该类型占用的位数。例如，如果<code>char</code>对象占用8位，那么<code>unsigned char</code>类型变量的取值范围是0~255，而<code>signed char</code>类型变量的取值范围则为-128~127（在采用二进制补码的机器上）。不带限定符的<code>char</code>类型对象是否带符号取决于具体的机器，但可打印字符总是正值。</p><p><code>long double</code>类型表示高精度浮点数。同整型一样，浮点型的长度也取决于具体的实现，<code>float</code>、<code>double</code>与<code>long double</code>类型可以表示相同的长度，也可以表示两种或三种不同的长度。</p><p>有关这些类型长度定义的符号常量以及其他与机器和编译器有关的属性可以在标准头文件<code>&lt;limits.h&gt;</code>与<code>&lt;float.h&gt;</code>中找到。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统，其中函数的类型指的是函数返回值的类型。对象的类型决定该对象可取值的集合以及可以对该对象执行的操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C程序设计语言" scheme="http://hawslice.com/categories/C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="编程" scheme="http://hawslice.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C语言" scheme="http://hawslice.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C语言入门</title>
    <link href="http://hawslice.com/2020/04/21/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    <id>http://hawslice.com/2020/04/21/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</id>
    <published>2020-04-21T10:06:14.000Z</published>
    <updated>2020-04-21T12:01:59.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a><font color="purple">Hello world</font></h2><p>学习一门新程序设计语言的唯一途径就是使用它编写程序。对于所有语言的初学者来说，编写的第一个程序几乎都是相同的，即打印出以下内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello, world</span><br></pre></td></tr></table></figure><p>在C语言中我们可以使用下列程序打印出”hello, world”：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello, world\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例解析"><a href="#实例解析" class="headerlink" title="实例解析"></a><font color="purple">实例解析</font></h2><p>一个C语言程序，无论其大小如何，都是由函数和变量组成的。函数中包含一些语句，以指定所要执行的计算操作；变量则用于存储计算过程中使用的值。在本例中，函数的名字为<code>main</code>。它是一个特殊的函数名——每个程序都是从<code>main</code>函数的起点开始执行，这意味着每个程序都必须在某个位置包含一个<code>main</code>函数。</p><p><code>main</code>函数在执行过程中，通常会调用其他函数来帮助执行计算，这些被调用的函数可以是我们自己编写的，也可以来自于函数库。</p><p>例子中的第一行语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>用于告诉编译器在本程序中包含标准输入/输出库的信息。在很多C语言源程序的其实部分都包含这一行语句。</p><p>函数在定义时需要选择一个返回类型，在本例中选用的<code>int</code>整型，所以我们在<code>main</code>函数的最后一句加上了一句<code>return 0;</code>。</p><p>在 C 程序中，分号是语句结束符。也就是说，每个语句必须以分号结束。它表明一个逻辑实体的结束。</p><p>函数之间进行数据交换的一种方法是调用函数向被调用函数提供一个值（参数）列表。函数后面的一对圆括号将参数列表括起来。在本例中，<code>main</code>函数不需要任何参数，因此用空参数表()表示。</p><p>函数中的语句用一对花括号{}括起来。<code>main</code>函数中的第二条语句已经解释过了，下面我们着重讲解第一条语句。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"hello, world\n"</span>);</span><br></pre></td></tr></table></figure><p>在调用函数时，只需要用函数名加上被括号括起来的参数表即可。在这一条语句中<code>printf</code>是一个用于打印输出的库函数，<code>&quot;hello, world\n&quot;</code>作为参数。这行语句的作用是在屏幕上打印出双引号之间的字符串。</p><p>用双引号括起来的字符串被称为<strong>字符串或字符串常量</strong>，<code>&quot;hello, world\n&quot;</code>就是一个字符串。</p><p>在C语言中字符序列<code>\n</code>表示换行符，在打印中遇到它时，打印输出将换行。如果去掉字符串中的<code>\n</code>，即使打印输出完成后也不会换行。在<code>printf</code>函数的参数中，只能用<code>\n</code>表示换行符。如果用程序的换行代替<code>\n</code>，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"hello, </span></span><br><span class="line"><span class="string">world"</span>);</span><br></pre></td></tr></table></figure><p>C编译器将产生一条错误信息。</p><p>printf函数永远不会自动换行，所以我们可以多次调用该函数以分阶段得到一个长输出行。上面给出的程序也可以改写成以下形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello, "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"world"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段程序与前面程序的输出结果时相同的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hello-world&quot;&gt;&lt;a href=&quot;#Hello-world&quot; class=&quot;headerlink&quot; title=&quot;Hello world&quot;&gt;&lt;/a&gt;&lt;font color=&quot;purple&quot;&gt;Hello world&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;学习一门新程
      
    
    </summary>
    
    
      <category term="C程序设计语言" scheme="http://hawslice.com/categories/C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="编程" scheme="http://hawslice.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C语言" scheme="http://hawslice.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>HTML基本结构与常用标记</title>
    <link href="http://hawslice.com/2020/04/20/HTML/"/>
    <id>http://hawslice.com/2020/04/20/HTML/</id>
    <published>2020-04-20T14:19:51.000Z</published>
    <updated>2020-04-21T11:53:12.927Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a><font color="purple">什么是HTML</font></h2><p>HTML的英文全称是Hyper Text Markup Language，即超文本标记语言，它是Internet上用于编写网页的主要标记语言。</p><h2 id="HTML文件的基本结构"><a href="#HTML文件的基本结构" class="headerlink" title="HTML文件的基本结构"></a><font color="purple">HTML文件的基本结构</font></h2><p>一个完整的HTML文件由各种元素与标记组成，包括标题、段落、表格和超链接等。下面是一个HTML文件的基本结构。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="解析说明"><a href="#解析说明" class="headerlink" title="解析说明"></a><font color="purple">解析说明</font></h2><ul><li><code>&lt;!DOCTYPE html&gt;</code>声明为HTML5文档。</li><li><code>&lt;html&gt;</code>元素是HTML页面的根元素，标示HTML文件的起始位置与结束位置。</li><li><code>&lt;head&gt;</code>元素包含了文档的元(meta)数据。</li><li><code>&lt;body&gt;</code>元素用来指明文档的主体区域，包含了可见的页面内容。  </li></ul><p><strong>注</strong>：在浏览器的页面上使用键盘上的F12开启调试模式，就可以看到组成标签。</p><h2 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a><font color="purple">HTML标签</font></h2><p>HTML 标记标签通常被称为 HTML 标签 (HTML tag)。</p><ul><li>HTML 标签是由尖括号包围的关键词，比如 <code>&lt;html&gt;</code>。</li><li>HTML 标签通常是成对出现的，比如<code>&lt;b&gt;</code>和<code>&lt;/b&gt;</code>。</li><li>标签对中的第一个标签是开始标签，第二个标签是结束标签。</li><li>开始和结束标签也被称为开放标签和闭合标签。  </li></ul><h2 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a><font color="purple">HTML元素</font></h2><p>HTML 标签” 和 “HTML 元素” 通常都是描述同样的意思.<br>但是严格来讲, 一个 HTML 元素包含了开始标签与结束标签，如下实例:<br>HTML 元素:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用HTML标记类型"><a href="#常用HTML标记类型" class="headerlink" title="常用HTML标记类型"></a><font color="purple">常用HTML标记类型</font></h2><p>常用HTML标记形式分为以下4种：</p><ol><li>&lt;标记名称&gt;：单一型，无设置值。例如：<code>&lt;br&gt;</code></li><li>&lt;标记名称 属性=”属性值”&gt;：单一型，有设置值。例如<code>&lt;hr color=&quot;red&quot;&gt;</code>。</li><li>&lt;标记名称&gt;…&lt;/标记名称&gt;：对称型，无设置值。例如<code>&lt;title&gt;</code>…<code>&lt;/title&gt;</code></li><li>&lt;标记名称 市举行=”属性值”&gt;…&lt;/标记名称》:对称型，有设置值。例如：<code>&lt;body bgcolor=&quot;red&quot;&gt;</code>…<code>&lt;/body&gt;</code>  </li></ol><h2 id="常用HTML标记"><a href="#常用HTML标记" class="headerlink" title="常用HTML标记"></a><font color="purple">常用HTML标记</font></h2><h3 id="标题-lt-hn-gt-…-lt-hn-gt"><a href="#标题-lt-hn-gt-…-lt-hn-gt" class="headerlink" title="标题&lt;hn&gt;…&lt;/hn&gt;"></a><font color="purple">标题<code>&lt;hn&gt;</code>…<code>&lt;/hn&gt;</code></font></h3><p><strong>h1</strong>到<strong>h6</strong>，作为标题标记，并且依据重要性递减，字号从<strong>h1</strong>到<strong>h6</strong>由大变小。实例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>学习标题标记<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标记类型<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>常用标记<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>h1</strong>一级标题代表重中之重，一般用于网站标题或者头条新闻。<br><strong>h2</strong>二级标题主要出现在主体内容的文章标题和栏目标题上。<br><strong>h3</strong>三级标题一般出现在页面的侧柏男篮上。<br>页面层级关系不能太深，所以<strong>h4、h5、h6</strong>一般出现的比较少。</p><h3 id="段落-lt-p-gt-…-lt-p-gt"><a href="#段落-lt-p-gt-…-lt-p-gt" class="headerlink" title="段落&lt;p&gt;…&lt;/p&gt;"></a><font color="purple">段落<code>&lt;p&gt;</code>…<code>&lt;/p&gt;</code></font></h3><p>在HTML网页中，使用标记实现一个新段落，语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>p标记有一个属性<strong>align</strong>能够设置段落中文字的对齐方式，对齐方式分为左对齐、居中和两端对齐，语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">"对齐方式"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，<strong>align</strong>取值为<strong>left</strong>时，文字显示左对齐；取值为<strong>right</strong>时，右对齐；取值为<strong>center</strong>时，居中对齐。</p><h3 id="滚动（marquee）"><a href="#滚动（marquee）" class="headerlink" title="滚动（marquee）"></a><font color="purple">滚动（marquee）</font></h3><p><strong>marquee</strong>标记可以让文字滚动，该标记有滚动方向（direction）、滚动方式（behavior）、滚动次数（loop）、滚动速度（scrollamount）、滚动延迟（scrolldelay）、背景颜色（bgcolor）、宽度和高度等常用属性。语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">direction</span>=<span class="string">"滚动方向"</span> <span class="attr">behavior</span>=<span class="string">"滚动方式"</span>&gt;</span>滚动的文字<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，<strong>direction</strong>的值有<strong>up</strong>、<strong>down</strong>、<strong>left</strong>和<strong>rigth</strong>，默认向左滚动‘<strong>behavior</strong>的值有<strong>scroll</strong>、<strong>slide</strong>和<strong>alternate</strong>，分别表示循环滚动、只滚动一次和来回交替滚动；<strong>loop</strong>的值为整数；<strong>scrollamount</strong>的值为文字每次移动的长度，以像素为单位；<strong>scrolldelay</strong>的单位是毫秒。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是HTML&quot;&gt;&lt;a href=&quot;#什么是HTML&quot; class=&quot;headerlink&quot; title=&quot;什么是HTML&quot;&gt;&lt;/a&gt;&lt;font color=&quot;purple&quot;&gt;什么是HTML&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;HTML的英文全称是Hyper Text M
      
    
    </summary>
    
    
      <category term="WEB应用开发技术" scheme="http://hawslice.com/categories/WEB%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Web前端" scheme="http://hawslice.com/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML" scheme="http://hawslice.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hawslice.com/2020/04/18/hello-world/"/>
    <id>http://hawslice.com/2020/04/18/hello-world/</id>
    <published>2020-04-18T06:57:45.957Z</published>
    <updated>2020-04-18T06:57:45.957Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
